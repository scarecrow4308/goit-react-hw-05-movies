{"version":3,"file":"static/js/838.d48b1e3b.chunk.js","mappings":"0MAA0B,2CAEbA,EAAU,wFACV,qCAAkC,gDACjC,gCAA8B,CA6EzC,OA7EyC,kFAE1C,WAAwBC,GAAK,uGAEFC,EAAAA,EAAAA,IAAU,GAAD,eAAIC,KAAI,uBAA2B,CACjEC,OAAQ,CACNH,MAAAA,EACAI,SAAQ,OAACF,KAAI,SAEd,KAAD,EALU,OAKV,SALMG,EAAI,EAAJA,KAAI,kBAMLA,GAAI,gCAEXC,QAAQC,IAAI,EAAD,IACXD,QAAQC,IAAI,WAAW,yDAE1B,mDAfyC,IAezC,4EAED,WAA4BC,GAAE,uGAEHP,EAAAA,EAAAA,IAAU,GAAD,eAAIC,KAAI,wBAAoBM,GAAM,CAChEL,OAAQ,CACNC,SAAQ,OAACF,KAAI,SAEd,KAAD,EAJU,OAIV,SAJMG,EAAI,EAAJA,KAAI,kBAKLA,GAAI,gCAEXC,QAAQC,IAAI,EAAD,IACXD,QAAQC,IAAI,WAAW,yDAE1B,mDAdA,IAcA,qEAED,WAAqBC,GAAE,uGAEIP,EAAAA,EAAAA,IAAU,GAAD,eAC3BC,KAAI,wBAAoBM,EAAE,YAC7B,CACEL,OAAQ,CACNC,SAAQ,OAACF,KAAI,SAGjB,KAAD,EAPW,OAOX,SAPOG,EAAI,EAAJA,KAAI,kBAQLA,GAAI,gCAEXC,QAAQC,IAAI,EAAD,IACXD,QAAQC,IAAI,WAAW,yDAE1B,mDAjBA,IAiBA,wEAED,WAAwBC,GAAE,uGAECP,EAAAA,EAAAA,IAAU,GAAD,eAC3BC,KAAI,wBAAoBM,EAAE,YAC7B,CACEL,OAAQ,CACNC,SAAQ,OAACF,KAAI,SAGjB,KAAD,EAPW,OAOX,SAPOG,EAAI,EAAJA,KAAI,kBAQLA,GAAI,gCAEXC,QAAQC,IAAI,EAAD,IACXD,QAAQC,IAAI,WAAW,yDAE1B,mDAjBA,IAiBA,0EAED,oHAE2BN,EAAAA,EAAAA,IAAU,GAAD,eAAIC,KAAI,2BAA+B,CACrEC,OAAQ,CACNC,SAAQ,OAACF,KAAI,SAEd,KAAD,EAJU,OAIV,SAJMG,EAAI,EAAJA,KAAI,kBAKLA,GAAI,gCAEXC,QAAQC,IAAI,EAAD,IACXD,QAAQC,IAAI,WAAW,yDAE1B,kDAdA,MAcA,EA/EoB,E,4FCkCvB,UAhCqB,SAAH,GAAmB,IAAbE,EAAK,EAALA,MACdC,EAAa,IAAIX,EAAAA,EACvB,GAA8BY,EAAAA,EAAAA,UAAS,MAAK,eAArCC,EAAO,KAAEC,EAAU,MAE1BC,EAAAA,EAAAA,YAAU,WACNC,GACJ,GAAG,IACH,IAAMA,EAAY,yCAAG,yGACEL,EAAWM,kBAAkBP,EAAMD,IAAI,KAAD,EAAnDH,EAAI,OACVQ,EAAWR,EAAKY,SAAS,2CAC5B,kBAHiB,mCAKlB,OAAKL,GASD,SAAC,EAAAM,SAAQ,WACL,0BACI,wBAAKN,EAAQO,KAAI,gBAAEX,EAAE,EAAFA,GAAIY,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAAO,OAAK,2BACvC,qCAAaD,MACb,uBAAIC,MAF4Cb,EAG/C,WAZT,0BACI,kDAehB,C","sources":["api/moviesAPI.js","components/MovieReviews/MovieReviews.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport class MovieClass {\r\n  #API_KEY = \"31f7347fdd134b657fbdaae56841ddf8\";\r\n  #BASE_URL = \"https://api.themoviedb.org/3\";\r\n\r\n  async fetchSearchMovies(query) {\r\n    try {\r\n      const { data } = await axios.get(`${this.#BASE_URL}/search/movie`, {\r\n        params: {\r\n          query,\r\n          api_key: this.#API_KEY,\r\n        },\r\n      });\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n      console.log(\"cathced\");\r\n    }\r\n  }\r\n\r\n  async fetchSearchMoviesById(id) {\r\n    try {\r\n      const { data } = await axios.get(`${this.#BASE_URL}/movie/${id}`, {\r\n        params: {\r\n          api_key: this.#API_KEY,\r\n        },\r\n      });\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n      console.log(\"cathced\");\r\n    }\r\n  }\r\n\r\n  async fetchMovieCast(id) {\r\n    try {\r\n      const { data } = await axios.get(\r\n        `${this.#BASE_URL}/movie/${id}/credits`,\r\n        {\r\n          params: {\r\n            api_key: this.#API_KEY,\r\n          },\r\n        }\r\n      );\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n      console.log(\"cathced\");\r\n    }\r\n  }\r\n\r\n  async fetchMovieReviews(id) {\r\n    try {\r\n      const { data } = await axios.get(\r\n        `${this.#BASE_URL}/movie/${id}/reviews`,\r\n        {\r\n          params: {\r\n            api_key: this.#API_KEY,\r\n          },\r\n        }\r\n      );\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n      console.log(\"cathced\");\r\n    }\r\n  }\r\n\r\n  async fetchTrendingMovies() {\r\n    try {\r\n      const { data } = await axios.get(`${this.#BASE_URL}/trending/all/day`, {\r\n        params: {\r\n          api_key: this.#API_KEY,\r\n        },\r\n      });\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n      console.log(\"cathced\");\r\n    }\r\n  }\r\n}\r\n","import { Suspense, useEffect, useState } from \"react\";\r\nimport { MovieClass } from \"../../api/moviesAPI\";\r\n\r\n\r\nconst MovieReviews = ({ movie }) => {\r\n    const movieFetch = new MovieClass();\r\n    const [reviews, setReviews] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetchReviews();\r\n    }, [])\r\n    const fetchReviews = async() => {\r\n        const data = await movieFetch.fetchMovieReviews(movie.id);\r\n        setReviews(data.results);\r\n    }\r\n\r\n    if (!reviews) {\r\n        return (\r\n            <div>\r\n                <h2>No review founded :(</h2>\r\n            </div>\r\n        );\r\n    };\r\n     \r\n    return (\r\n        <Suspense>\r\n            <div>\r\n                <ul>{reviews.map(({id, author, content})=> <li key={id}>\r\n                    <h2>Author: {author}</h2>\r\n                    <p>{content}</p>\r\n                </li>)}</ul>\r\n            </div>\r\n        </Suspense>\r\n    );\r\n};\r\n\r\nexport default MovieReviews;"],"names":["MovieClass","query","axios","this","params","api_key","data","console","log","id","movie","movieFetch","useState","reviews","setReviews","useEffect","fetchReviews","fetchMovieReviews","results","Suspense","map","author","content"],"sourceRoot":""}